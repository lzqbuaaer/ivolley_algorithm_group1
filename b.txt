// pages/students/Dowork/Dowork.js
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isCheck:getApp().globalData.isCheck,
    student_file : '',
    student_file_type : '',
    homework_id : '',
    teacher_file : '',
    teacher_type : '',
    videoList: [],
    imgList: [],
    fileList: [],
    Title:'',
    content:'',
    homework_id:'',
    enable: false,
    loadingProps: {
        size: '50rpx',
      },
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad(options) {
    console.log(options);
    this.setData({
        homework_id:options.homeworkid,
        Title:options.title,
        content:options.content
    })
    const that = this;
        wx.getSystemInfo({
          success: function(res) {
            const windowHeight = res.windowHeight; // 获取屏幕高度
            that.setData({
              windowHeight: windowHeight // 设置页面高度
            });
          }
        });
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {
    let cookie = wx.getStorageSync('cookieKey');
    wx.request({
      url: 'https://ivolley.cn:8443/iVolley_api/stu2hw2profile/',
      method: 'POST',
      header: {
        'content-type': 'application/x-www-form-urlencoded',
        'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
        'X-CSRFToken': wx.getStorageSync("csrftoken").split(';')[0].split('=')[1]
      },
      data:{
        "homework_id":this.data.homework_id
      },
      success: (res)=> {
        console.log("success load gited homework")
        console.log(res)
        var tempListi = []
        for (var i = 0; i < res.data.imgs.length; i++) {
          var item = res.data.imgs[i]
          item.index = i
          item.subtime = item.subtime.substring(0,10)
          item.AI_status = item.AI_status == 0 ? 'AI检测中' : 'AI检测完成'
          item.teacher_status = item.teacher_status == 0 ? '教师未评价' : '教师已评价'
          tempListi.push(item)
        }
        this.setData({
          imgList: tempListi,
        })
        var tempListv = []
        for (var j = 0; j < res.data.videos.length; j++) {
          var item = res.data.videos[j]
          item.index = j
          item.subtime = item.subtime.substring(0,10)
          item.AI_status = item.AI_status == 0 ? 'AI检测中' : 'AI检测完成'
          item.teacher_status = item.teacher_status == 0 ? '教师未评价' : '教师已评价'
          tempListv.push(item)
        }
        this.setData({
          videoList: tempListv,
        })
        var tempListf = []
        for (var j = 0; j < res.data.files.length; j++) {
          var item = res.data.files[j]
          item.index = j
          tempListf.push(item)
        }
        this.setData({
            fileList:tempListf,
        })
        this.setData({
            teacher_file:res.data.file,
            teacher_type:res.data.type,
        })
        this.setData({
          student_file:res.data.files[0].URL,
          student_file_type:res.data.files[0].file_type
        })
      },
      fail: (res)=> {
        console.log(res)
      }
    })

  },
  onRefresh() {
    this.setData({ enable: true });
    let cookie = wx.getStorageSync('cookieKey');
    wx.request({
      url: 'https://ivolley.cn:8443/iVolley_api/stu2hw2profile/',
      method: 'POST',
      header: {
        'content-type': 'application/x-www-form-urlencoded',
        'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
        'X-CSRFToken': wx.getStorageSync("csrftoken").split(';')[0].split('=')[1]
      },
      data:{
        "homework_id":this.data.homework_id
      },
      success: (res)=> {
        console.log("success load gited homework")
        console.log(res)
        var tempListi = []
        for (var i = 0; i < res.data.imgs.length; i++) {
          var item = res.data.imgs[i]
          item.index = i
          item.subtime = item.subtime.substring(0,10)
          item.AI_status = item.AI_status == 0 ? 'AI检测中' : 'AI检测完成'
          item.teacher_status = item.teacher_status == 0 ? '教师未评价' : '教师已评价'
          tempListi.push(item)
        }
        this.setData({
          imgList: tempListi,
        })
        var tempListv = []
        for (var j = 0; j < res.data.videos.length; j++) {
          var item = res.data.videos[j]
          item.index = j
          item.subtime = item.subtime.substring(0,10)
          item.AI_status = item.AI_status == 0 ? 'AI检测中' : 'AI检测完成'
          item.teacher_status = item.teacher_status == 0 ? '教师未评价' : '教师已评价'
          tempListv.push(item)
        }
        this.setData({
          videoList: tempListv,
        })
      },
      fail: (res)=> {
        console.log(res)
      }

    })
    setTimeout(() => {
        this.setData({ enable: false });
      }, 500);
 },
 onClickImg({currentTarget}) {
    let cookie = wx.getStorageSync('cookieKey');
      console.log({currentTarget});
     var {index} = currentTarget.dataset
     var ID = this.data.imgList[index].img_id
    //var ID = currentTarget.dataset.index+1
    //console.log(ID);
    //var id = currentTarget.dataset.index
    wx.request({
      url: 'https://ivolley.cn:8443/iVolley_api/get_img_profile/',
      method:"POST",
      header:{
        'content-type': 'application/x-www-form-urlencoded',
        'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
      },
      data:{
        "img_id":ID,
      },
      success: (res)=> {
          console.log(res);
          var code = res.data.status;
          var which_img = res.data.URL;
          var ai_feedback = res.data.AI_feedback;
          var teacher_feedback = res.data.teacher_feedback;
          var teastatus = res.data.teacher_status;
          var errorimg = res.data.error_img;
          var type = res.data.type;
          //console.log(which_img)
        var url = '../studentViewVideo/studentViewVideo?ID=' + which_img + '&type=1'
                    +'&AI_feedback='+ai_feedback+'&teacherfeback='+teacher_feedback+
                    '&teacherstatus='+teastatus+'&errorimg='+errorimg+
                    '&teacherAI='+type
        //console.log(url)
        wx.navigateTo({
      url: url
    })
      }
    })

  },
  onClickVideo({currentTarget}) {
    console.log({currentTarget});
   let cookie = wx.getStorageSync('cookieKey');
    var {index} = currentTarget.dataset
    var ID = this.data.videoList[index].video_id
   //var ID = currentTarget.dataset.index + 1
   console.log(ID);
   //var id = currentTarget.dataset.index
   wx.request({
     url: 'https://ivolley.cn:8443/iVolley_api/get_video_profile/',
     method:"POST",
     header:{
       'content-type': 'application/x-www-form-urlencoded',
       'Cookie':cookie,
     },
     data:{
       "video_id":ID
     },
     success: (res)=> {
        //console.log(res);
        var code = res.data.status;
        var which_img = res.data.URL;
        var ai_feedback = res.data.AI_feedback;
        var teacher_feedback = res.data.teacher_feedback;
        var teastatus = res.data.teacher_status;
        var errorimg = res.data.error_video;
        var type = res.data.type;
        //console.log(ID)
        var url = '../studentViewVideo/studentViewVideo?ID=' + which_img + '&type=2'
        +'&AI_feedback='+ai_feedback+'&teacherfeback='+teacher_feedback+
        '&teacherstatus='+teastatus+'&errorimg='+errorimg+
        '&teacherAI='+type
      //console.log(url)
      wx.navigateTo({
    url: url
  })
    }
  })
},
onClickfile(){
    var that = this
    let fileadd = that.data.student_file
    let filetype = that.data.student_file_type
    console.log(fileadd);
    console.log(filetype);
    wx.downloadFile({ //将文档下载到本地
        url: fileadd,
        success(res) {
        if(filetype === 'doc'){
          wx.openDocument({ //打开文档
            filePath: res.tempFilePath,//本地文档路径
            fileType: "doc",//文档类型
            showMenu: true,
            success: function (res) {
              wx.showToast({
                title: '打开文档成功',
              })
            },
            fail: function (res) {
              wx.showToast({
                title: '打开文档失败',
              })
            },
          })
        }
        else if(filetype === 'docx'){
            wx.openDocument({ //打开文档
              filePath: res.tempFilePath,//本地文档路径
              fileType: "docx",//文档类型
              showMenu: true,
              success: function (res) {
                wx.showToast({
                  title: '打开文档成功',
                })
              },
              fail: function (res) {
                wx.showToast({
                  title: '打开文档失败',
                })
              },
            })
          }
        else if(filetype === 'pdf'){
            wx.openDocument({ //打开文档
              filePath: res.tempFilePath,//本地文档路径
              fileType: "pdf",//文档类型
              showMenu: true,
              success: function (res) {
                wx.showToast({
                  title: '打开文档成功',
                })
              },
              fail: function (res) {
                wx.showToast({
                  title: '打开文档失败',
                })
              },
            })
          }
          else if(filetype === 'png'||filetype === 'jpg'||filetype === 'jpeg'){
            wx.previewImage({
                current: fileadd,
                urls: [fileadd],
              });
          }
          else if(filetype === 'mp4'){
            wx.navigateTo({
                url: `../teacher_video/teacher_video?url=`+fileadd,
              });
          }
          else{
            wx.openDocument({ //打开文档
                filePath: res.tempFilePath,//本地文档路径
                fileType: "doc",//文档类型
                showMenu: true,
                success: function (res) {
                  wx.showToast({
                    title: '打开文档成功',
                  })
                },
                fail: function (res) {
                  wx.showToast({
                    title: '暂时不支持该文件类型',
                  })
                },
              })
          }
        },
     fail(res){
       console.log(res);
     }
      })
},
viewTeacherFile(){
    let fileadd = this.data.teacher_file
    let filetype = this.data.teacher_type
    console.log(filetype);
    console.log(fileadd);
    if(fileadd === 'https://ivolley.cn:8443/pub_hw/None'){
        wx.showToast({
          icon: 'none',
          title: '老师没有上传文件',
        })
    }
    else if(filetype === 'mp4'){
      wx.navigateTo({
          url: `../teacher_video/teacher_video?url=`+fileadd,
        });
    }
    else if(filetype === 'png'||filetype === 'jpg'||filetype === 'jpge'){
      wx.previewImage({
        current: fileadd,
        urls: [fileadd],
      });
    }
    else{
    wx.downloadFile({ //将文档下载到本地
        url: fileadd,
        success(res) {
        console.log(res);
        if(filetype === 'doc'){
          wx.openDocument({ //打开文档
            filePath: res.tempFilePath,//本地文档路径
            fileType: "doc",//文档类型
            showMenu: true,
            success: function (res) {
              wx.showToast({
                title: '打开文档成功',
              })
            },
            fail: function (res) {
              wx.showToast({
                title: '打开文档失败',
              })
            },
          })
        }
        else if(filetype === 'docx'){
            wx.openDocument({ //打开文档
              filePath: res.tempFilePath,//本地文档路径
              fileType: "docx",//文档类型
              showMenu: true,
              success: function (res) {
                wx.showToast({
                  title: '打开文档成功',
                })
              },
              fail: function (res) {
                wx.showToast({
                  title: '打开文档失败',
                })
              },
            })
          }
        else if(filetype === 'pdf'){
            wx.openDocument({ //打开文档
              filePath: res.tempFilePath,//本地文档路径
              fileType: "pdf",//文档类型
              showMenu: true,
              success: function (res) {
                wx.showToast({
                  title: '打开文档成功',
                })
              },
              fail: function (res) {
                wx.showToast({
                  title: '打开文档失败',
                })
              },
            })
          }

          else{
            wx.openDocument({ //打开文档
                filePath: res.tempFilePath,//本地文档路径
                fileType: "doc",//文档类型
                showMenu: true,
                success: function (res) {
                  wx.showToast({
                    title: '打开文档成功',
                  })
                },
                fail: function (res) {
                  wx.showToast({
                    title: '暂时不支持该文件类型',
                  })
                },
              })
          }
        },
      })
    }

},
  uploadImage: function() {
    wx.navigateTo({
      url: '../video/video?type=1&homework_id='+this.data.homework_id
    })
  },
  uploadVideo: function() {
    wx.navigateTo({
      url: '../video/video?type=2&homework_id='+this.data.homework_id
    })
  },
  uploadFile: function() {
    wx.navigateTo({
        url: '../GitFile/GitFile?homework_id='+this.data.homework_id
      })
  },
  onScroll(e) {
    const { scrollTop } = e.detail;

    this.setData({
      backTopVisible: scrollTop > 100,
    });
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },
  clickClosev(e){
    console.log(e);
  let cookie = wx.getStorageSync('cookieKey');
  var {index} = e.currentTarget.dataset
   var V_index = this.data.videoList[index].video_id

  wx.request({
    url: 'https://ivolley.cn:8443/iVolley_api/del_video/',
    method:'POST',
    header: {
      'content-type': 'application/x-www-form-urlencoded',
      'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
      'X-CSRFToken': wx.getStorageSync("csrftoken").split(';')[0].split('=')[1]
    },
    data:{
        "video_id":V_index,
    },
    success: (res)=> {
        console.log(res);
        let {index} = e.currentTarget.dataset;
        let arr = this.data.videoList;
         arr.splice(index,1);
        this.setData({
          videoList : arr
        })
    }
  })
},
clickClosei(e){
    console.log(e);
    var {index} = e.currentTarget.dataset
   var I_index = this.data.imgList[index].img_id
    let cookie = wx.getStorageSync('cookieKey');
    wx.request({
      url: 'https://ivolley.cn:8443/iVolley_api/del_img/',
      method:'POST',
      header: {
          'content-type': 'application/x-www-form-urlencoded',
          'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
          'X-CSRFToken': wx.getStorageSync("csrftoken").split(';')[0].split('=')[1]
        },
      data:{
          "img_id":I_index,
      },
      success: (res)=> {
          let {index} = e.currentTarget.dataset;
          let arr = this.data.imgList;
           arr.splice(index,1);
          this.setData({
              imgList : arr
          })
      }
    })

},
onScroll(e) {
    const { scrollTop } = e.detail;

    this.setData({
      backTopVisible: scrollTop > 100,
    });
  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  }
})
{
    "navigationBarTitleText": "作业详情",
    "backgroundTextStyle": "light",
    "component": true,
    "disableScroll": true,
    "usingComponents": {
      "t-cell-group": "tdesign-miniprogram/cell-group/cell-group",
      "t-cell": "tdesign-miniprogram/cell/cell",
      "t-pull-down-refresh": "tdesign-miniprogram/pull-down-refresh/pull-down-refresh"
    }
  }
<t-pull-down-refresh
  value="{{enable}}"
  loadingProps="{{loadingProps}}"
  loadingTexts="{{['下拉刷新', '松手刷新', '正在刷新', '刷新完成']}}"
  bind:refresh="onRefresh"
  bind:scroll="onScroll"
>
<view class="video" style="margin-left: 15rpx; margin-right: 15rpx; margin-top: 20rpx;">
    <text style="font-size: 40rpx;">{{Title}}</text>
    <view class = "teacherfe">
      <text>{{content}}</text>
    </view>
    <button class="simple-button" bindtap="viewTeacherFile">查看教师文件</button>
</view>

<view wx:if="{{!isCheck}}">

<view class="page-container" style="padding-bottom: 200rpx;">
  <view class="header"><text class="header-text"style="margin: 10rpx; font-size: 40rpx;" wx:if="{{videoList.length > 0}}">视频列表</text></view>

  <view class="videoblock" wx:for="{{videoList}}" wx:for-item="item" wx:for-index="index" wx:key="vid">
      <t-cell hover bind:click="onClickVideo" data-index="{{item.index}}" id='cell{{item.index}}' title="{{item.name}}" note="{{item.subtime}}" description="{{item.AI_status + ' ' + item.teacher_status}}" arrow
      style=" margin-bottom: 10rpx; border-color:#000">
        <view class="avatar" slot="left-icon" style="display: flex; background-color: bisque; width: 100%;">
          <!-- <image src="{{item.img}}" style="width: 60rpx; height: 60rpx;" /> -->
        </view>
      </t-cell>
      <view class="close" hover-stop-propagation><icon type="clear" bindtap="clickClosev" data-index="{{index}}" size="20"/></view>
  </view>

  <view class="headeri"><text class="header-text"style="margin: 10rpx; font-size: 40rpx;" wx:if="{{imgList.length > 0}}">图片列表</text></view>
  <view class="imgblock" wx:for="{{imgList}}" wx:for-item="item" wx:for-index="index" wx:key="iid">
      <t-cell hover bind:click="onClickImg" data-index="{{item.index}}" id='cell{{item.index}}' title="{{item.name}}" note="{{item.subtime}}" description="{{item.AI_status + ' ' + item.teacher_status}}" arrow
      style=" margin-bottom: 10rpx; border-color:#000">
        <view class="avatar" slot="left-icon" style="display: flex; background-color: bisque; width: 100%;">
          <image src="{{item.URL}}" style="width: 60rpx; height: 60rpx;" />
        </view>
      </t-cell>
      <view class="close" hover-stop-propagation><icon type="clear" bindtap="clickClosei" data-index="{{index}}" size="20"/></view>
  </view>

  <view class="headeri"><text class="header-text"style="margin: 10rpx; font-size: 40rpx;" wx:if="{{fileList.length > 0}}">文件列表</text></view>
  <view class="imgblock" wx:for="{{fileList}}" wx:for-item="item" wx:for-index="index" wx:key="fid">
      <t-cell hover bind:click="onClickfile" data-index="{{item.index}}" id='cell{{item.index}}' title="{{item.student_name}}" note="点击查看" description="您上传的文件" arrow
      style=" margin-bottom: 10rpx; border-color:#000">
        <view class="avatar" slot="left-icon" style="display: flex; background-color: bisque; width: 100%;">
          <image src="../../../images/文件.png" style="width: 60rpx; height: 60rpx;" />
        </view>
      </t-cell>
  </view>

<view class="upload-button">
  <button bindtap="uploadVideo">上传视频(小于20M)</button>
</view>
<view class="upload-button2">
<button bindtap="uploadImage">上传图片(小于20M)</button>
</view>
<view class="upload-button2">
<button bindtap="uploadFile">上传文件(小于20M)</button>
</view>
</view>
</view><view wx:else class="container">
    <view class="bg"></view>
    <view class="wrap">
        <view class="top-tips">
            <text>{{date}}2024-02-22 周六 晴天 </text>
        </view>
        <view class="menu-ul">
            <view class="title">

                <text> 目标计划</text>
                <view class="qty">22人使用</view>
            </view>
        </view>
        <view class="custom-date-list">
            <custom-date-list   id="date"> </custom-date-list>
            <image  class="yuan-ad2" bindtap="water2" src=" https://img.tukuppt.com/png_preview/02/90/77/Pgz527eUmD.jpg%21/fw/780"></image>
        </view>

        <button class="share" openType="share">
            <text class="in in-fenxiang1"></text> 分享制定计划</button>
    </view>
</view>

</t-pull-down-refresh>

.page-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  /* 设置视频和老师信息容器的样式，垂直排列子元素 */
  .video {
    margin: 15rpx;
    padding: 20rpx;
    background-color: #f0f0f0;
    border-radius: 10rpx;
    box-shadow: 0 0 10rpx rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  .teacherfe {
    margin-top: 20rpx;
    font-size: 32rpx;
    color: #333;
  }

  /* 设置视频列表和图片列表容器的样式，使用 Flexbox 布局，水平排列子元素 */
  .videoblock,
  .imgblock {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }

  /* 设置视频和图片列表项的样式，设置间距和阴影 */
  .t-cell {
    margin: 10rpx;
    padding: 20rpx;
    background-color: #fff;
    border-radius: 10rpx;
    box-shadow: 0 0 10rpx rgba(0, 0, 0, 0.1);
  }

  /* 设置关闭按钮的样式 */
  .close {
    size: 5rpx;
  }

  /* 设置上传按钮的样式 */
  .upload-button,
  .upload-button2 {
    margin-top: 20rpx;
  }

  /* 下拉刷新组件的样式 */
  .t-pull-down-refresh {
    background-color: antiquewhite;
  }

  .simple-button {
    background-color: #f0f0f0;
    color: #333;
    padding: 10rpx 20rpx;
    border: 1px solid #ccc;
    border-radius: 5rpx;
    font-size: 30rpx;
    cursor: pointer;
    transition: background-color 0.3s;
}

.simple-button:hover {
    background-color: #e0e0e0; /* 鼠标悬停时的背景颜色 */
}
// pages/students/Resourse/Resourse.js
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isCheck:getApp().globalData.isCheck,
    fileList: [
        {
            "url": "file:///D:/chroms%E4%B8%8B%E8%BD%BD/2023%E7%BC%96%E8%AF%91%E5%AE%9E%E9%AA%8C%E6%96%87%E6%B3%95%E8%AF%B4%E6%98%8E.pdf",
            "type": "pdf",
            "explain": "必须里面每个动作都学会",
            "init_name":"第一天动作指导"
            },
            {
            "url": "file:///D:/chroms%E4%B8%8B%E8%BD%BD/2023%E7%BC%96%E8%AF%91%E5%AE%9E%E9%AA%8C%E6%96%87%E6%B3%95%E8%AF%B4%E6%98%8E.pdf",
            "type": "pdf",
            "explain": "another_file_description",
            "init_name":"第二个文件"
            },
    ], // 存储文件列表
    lefticon:"../../../images/图片.png",
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad(options) {

},

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {
    let cookie = wx.getStorageSync('cookieKey');
    wx.request({
        url: 'https://ivolley.cn:8443/iVolley_api/student_get_material/',
        method: 'POST',
        header: {
          'content-type': 'application/x-www-form-urlencoded',
          'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
        },
        success: (res)=> {
            console.log(res);
            this.setData({
                fileList:res.data.file_list
            })
        }
  })
  },
  onFileItemClick(e) {
      console.log(e);
    const index = e.currentTarget.dataset.index;
    const selectedItem = this.data.fileList[index];

    // 根据文件类型执行不同的操作
    switch (selectedItem.type) {
      case 'mp4':
        wx.navigateTo({
          url: `../../students/teacher_video/teacher_video?url=${selectedItem.url}`,
        });
        break;
      case 'jpg':
        wx.previewImage({
          current: selectedItem.url,
          urls: [selectedItem.url],
        });
        break;
        case 'png':
            wx.previewImage({
              current: selectedItem.url,
              urls: [selectedItem.url],
            });
            break;
        case 'jpeg':
                wx.previewImage({
                  current: selectedItem.url,
                  urls: [selectedItem.url],
                });
            break;
      case 'doc':
          console.log("doc");
        // 处理文档的打开
        wx.downloadFile({ //将文档下载到本地
            url: selectedItem.url,//pdf链接
            success(res) {
              wx.openDocument({ //打开文档
                filePath: res.tempFilePath,//本地文档路径
                fileType: "doc",//文档类型
                showMenu: true,
                success: function (res) {
                  wx.showToast({
                    title: '打开文档成功',
                  })
                },
                fail: function (res) {
                  wx.showToast({
                    title: '打开文档失败',
                  })
                },
              })
            },
          })
        break;
        case 'docx':
          console.log("docx");
        // 处理文档的打开
        wx.downloadFile({ //将文档下载到本地
            url: selectedItem.url,//pdf链接
            success(res) {
              wx.openDocument({ //打开文档
                filePath: res.tempFilePath,//本地文档路径
                fileType: "docx",//文档类型
                showMenu: true,
                success: function (res) {
                  wx.showToast({
                    title: '打开文档成功',
                  })
                },
                fail: function (res) {
                  wx.showToast({
                    title: '打开文档失败',
                  })
                },
              })
            },
          })
        break;
      case 'pdf':
        // 处理 PDF 文件的打开
        console.log("pdf");
        wx.downloadFile({ //将文档下载到本地
            url: selectedItem.url,//pdf链接
            success(res) {
              wx.openDocument({ //打开文档
                filePath: res.tempFilePath,//本地文档路径
                fileType: "pdf",//文档类型
                showMenu: true,
                success: function (res) {
                  wx.showToast({
                    title: '打开文档成功',
                  })
                },
                fail: function (res) {
                  wx.showToast({
                    title: '打开文档失败',
                  })
                },
              })
            },
          })
        break;
        case 'mov':
        wx.navigateTo({
          url: `../../students/teacher_video/teacher_video?url=${selectedItem.url}`,
        });
        break;
        case 'xls':
            // 处理 PDF 文件的打开
            console.log("xls");
            wx.downloadFile({ //将文档下载到本地
                url: selectedItem.url,//pdf链接
                success(res) {
                  wx.openDocument({ //打开文档
                    filePath: res.tempFilePath,//本地文档路径
                    fileType: "xls",//文档类型
                    showMenu: true,
                    success: function (res) {
                      wx.showToast({
                        title: '打开文档成功',
                      })
                    },
                    fail: function (res) {
                      wx.showToast({
                        title: '打开文档失败',
                      })
                    },
                  })
                },
              })
            break;
            case 'xlsx':
                // 处理 PDF 文件的打开
                console.log("xlsx");
                wx.downloadFile({ //将文档下载到本地
                    url: selectedItem.url,//pdf链接
                    success(res) {
                      wx.openDocument({ //打开文档
                        filePath: res.tempFilePath,//本地文档路径
                        fileType: "xlsx",//文档类型
                        showMenu: true,
                        success: function (res) {
                          wx.showToast({
                            title: '打开文档成功',
                          })
                        },
                        fail: function (res) {
                          wx.showToast({
                            title: '打开文档失败',
                          })
                        },
                      })
                    },
                  })
                break;
                case 'csv':
                    // 处理 PDF 文件的打开
                    console.log("csv");
                    wx.downloadFile({ //将文档下载到本地
                        url: selectedItem.url,//pdf链接
                        success(res) {
                          wx.openDocument({ //打开文档
                            filePath: res.tempFilePath,//本地文档路径
                            fileType: "csv",//文档类型
                            showMenu: true,
                            success: function (res) {
                              wx.showToast({
                                title: '打开文档成功',
                              })
                            },
                            fail: function (res) {
                              wx.showToast({
                                title: '打开文档失败',
                              })
                            },
                          })
                        },
                      })
                    break;
      case 'link':
        wx.navigateTo({
          url: `/pages/webview/webview?url=${selectedItem.url}`,
        });
        break;
      default:
        console.log("other");
        // 处理文档的打开
        wx.downloadFile({ //将文档下载到本地
            url: selectedItem.url,//pdf链接
            success(res) {
              wx.openDocument({ //打开文档
                filePath: res.tempFilePath,//本地文档路径
                fileType: "docx",//文档类型
                showMenu: true,
                success: function (res) {
                  wx.showToast({
                    title: '打开文档成功',
                  })
                },
                fail: function (res) {
                  wx.showToast({
                    title: '打开文档失败',
                  })
                },
              })
            },
          })
        break;
    }
  },
  onFileItemClickError(){
    wx.showToast({
      icon:'error',
      title: '暂不支持该类型文件',
    })
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  }
})
{
  "usingComponents": {
    "t-cell-group": "tdesign-miniprogram/cell-group/cell-group",
    "t-cell": "tdesign-miniprogram/cell/cell",
    "t-pull-down-refresh": "tdesign-miniprogram/pull-down-refresh/pull-down-refresh"
  }
}
<view wx:if="{{!isCheck}}">
<view class="file-list">
  <view wx:for="{{fileList}}" wx:for-item="item"  wx:for-index="index" wx:key="signid">
    <block wx:if="{{item.type === 'pdf'}}">
    <t-cell left-icon="../../../images/pdf.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'doc'}}">
    <t-cell left-icon="../../../images/WORD.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'docx'}}">
    <t-cell left-icon="../../../images/WORD.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'jpg'}}">
    <t-cell left-icon="../../../images/图片.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'mp4'}}">
    <t-cell left-icon="../../../images/视频播放.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'csv'}}">
    <t-cell left-icon="../../../images/文件.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'xls'}}">
    <t-cell left-icon="../../../images/文件.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'xlsx'}}">
    <t-cell left-icon="../../../images/文件.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'mov'}}">
    <t-cell left-icon="../../../images/视频播放.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'md'}}">
    <t-cell left-icon="../../../images/MD.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:elif="{{item.type === 'rar'||item.type === 'zip'}}">
    <t-cell left-icon="../../../images/文件.png" class="file-item" bind:click="onFileItemClickError" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <block wx:else>
    <t-cell left-icon="../../../images/文件.png" class="file-item" bind:click="onFileItemClick" data-index="{{index}}" id='cell{{item.index}}' title="{{item.init_name}}" note="{{item.type}}" description="{{item.explain}}" style=" margin-bottom: 10rpx; border-color:#000">
    </t-cell>
    </block>

    <view class="divider"></view>
  </view>
</view>
</view><view wx:else class="container">
    <view class="bg"></view>
    <view class="wrap">
        <view class="top-tips">
            <text>{{date}}2024-02-22 周六 晴天 </text>
        </view>
        <view class="menu-ul">
            <view class="title">

                <text> 目标计划</text>
                <view class="qty">22人使用</view>
            </view>
        </view>
        <view class="custom-date-list">
            <custom-date-list   id="date"> </custom-date-list>
            <image  class="yuan-ad2" bindtap="water2" src=" https://img.tukuppt.com/png_preview/02/90/77/Pgz527eUmD.jpg%21/fw/780"></image>
        </view>

        <button class="share" openType="share">
            <text class="in in-fenxiang1"></text> 分享制定计划</button>
    </view>
</view>
.file-list {
    padding: 100rpx; /* 可根据需要调整外边距 */
  border: 1rpx solid rgb(194, 189, 189); /* 添加外框 */
    padding: 20px;
  }

  .file-item {
    padding: 15px;
    margin-bottom: 10px;
    background-color: rgb(215, 235, 245);
    border: 1px solid #ddd; /* 添加边框 */
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease-in-out;
    cursor: pointer;

  }

  .file-item:hover {
    background-color: #f5f5f5;
  }

  /* 根据文件类型添加不同的图标 */
  .file-item::before {
    content: '';
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 10px;
    background-repeat: no-repeat;
    background-size: cover;
  }

  /* 图片文件的图标 */
  .file-item[data-type="image"]::before {
    background-image: url('/images/image-icon.png');
  }

  /* 视频文件的图标 */
  .file-item[data-type="video"]::before {
    background-image: url('/images/video-icon.png');
  }

  /* 文档文件的图标 */
  .file-item[data-type="document"]::before {
    background-image: url('/images/document-icon.png');
  }

  /* PDF 文件的图标 */
  .file-item[data-type="pdf"]::before {
    background-image: url('/images/pdf-icon.png');
  }

  /* 链接文件的图标 */
  .file-item[data-type="link"]::before {
    background-image: url('/images/link-icon.png');
  }

  /* 标题样式 */
  .file-item span {
    font-size: 16px;
    font-weight: bold;
  }

  /* 描述样式 */
  .file-item p {
    font-size: 14px;
    color: #888;
    margin-top: 5px;
  }
  .divider {
    height: 5rpx;
  background: linear-gradient(to right, #ddd, #fff, #ddd); /* 渐变效果 */
  margin: 10rpx 0;
  box-shadow: 0 2rpx 5rpx rgba(0, 0, 0, 0.1);
  position: absolute;
  left: 0;
  right: 0;

  }
  // pages/teachers/teacher_home/teacher_home.js
import Message from 'tdesign-miniprogram/message';
import {config} from '../../../config/index'

Page({

  /**
   * 页面的初始数据
   */
  data: {
    isCheck:getApp().globalData.isCheck,
    noticevisible:false,
    homeworkvisible:false,
    newread:0,
    noticetip:"您有新消息，请您点击消息通知栏查看",
    activeValues: [],
    studentList: [],
    noticelist:[{ "notice_id": '1',
    "text": "明天考试",
    "read": '未读'}],
    homework_list:[
        {
            index:0,
            homework_id: 1,
            name: "第九周-课后练习(测试)",
            text: "请同学们上传今天练习视频，每位同学垫球50次（测试）"
        }
    ],
    value: 'label_1',
    list: [
      { value: 'label_1', label: '作业练习', icon: 'home' },
      { value: 'label_3', label: '签到', icon: '../../../images/unlocate.png' },
      { value: 'label_4', label: '个人中心', icon: 'user' },
    ]
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad(options) {
    const { windowHeight } = wx.getSystemInfoSync();
        //获取自定义tabbar的高度
        const tabbarHeight = 50;// 替换为你实际的tabbar高度
        //计算页面的可用高度
        const pageHeight = windowHeight - tabbarHeight
        //设置页面高度
        this.setData({
            pageHeight:pageHeight + 'px'
        })
    // wx.request({
    //   url: config.domain + 'tea2stu/',
    //   method: 'POST',
    //   data: {
    //   },
    //   header: {
    //     'content-type': 'application/x-www-form-urlencoded',
    //     'Cookie': wx.getStorageSync('cookie')
    //   },
    //   success: (res)=> {
    //     console.log(res)
    //     var tempList = []
    //     for (var i = 0; i < res.data.students.length; i++) {
    //       var item = res.data.students[i]
    //       item.index = i
    //       tempList.push(item)
    //     }
    //     this.setData({
    //       studentList: tempList
    //     })
    //   },
    //   fail: (res)=> {
    //     console.log(res)
    //   }
    // })
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {
  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {
      var that = this;
    let cookie = wx.getStorageSync('cookieKey');
    wx.request({
        url: 'https://ivolley.cn:8443/iVolley_api/stu2notice/',
        method: 'POST',
        header: {
          'content-type': 'application/x-www-form-urlencoded',
          'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
        },
        success: (res)=> {
          console.log(res)
          var tempListn = []
          let IsH_new = 0
          for (var n = 0; n < res.data.notice.length; n++) {
            var item = res.data.notice[n]
            item.index = n
            if(item.read === '0'){
                IsH_new = 1;
            }
             item.read = item.read == 0?'未读' :'已读'
            tempListn.push(item)
          }

          console.log(IsH_new);
          this.setData({
            noticelist: tempListn,
            newread:IsH_new,
          })
        //   if(res.data.notice.read==0){
        //     this.setData({
        //        newread : 1
        //       })
        //   }
        }
    })
    wx.request({
      url: 'https://ivolley.cn:8443/iVolley_api/stu2hw2info/',
      method: 'POST',
      header: {
        'content-type': 'application/x-www-form-urlencoded',
        'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
        'X-CSRFToken': wx.getStorageSync("csrftoken").split(';')[0].split('=')[1]
      },
      success: (res)=> {
        console.log(res)
        var tempList = []
        for (var i = 0; i < res.data.homework_list.length; i++) {
          var item = res.data.homework_list[i]
          item.index = i
          tempList.push(item)
        }
        this.setData({
          homework_list: tempList,
        })
    }

  })
},
onclickvisible(e){
    this.setData({
        noticevisible: !this.data.noticevisible,
        newread:0
      });
},
onclickvisiblehome(){
    this.setData({
        homeworkvisible:!this.data.homeworkvisible,
    })
},
onClickhomework(e){
    console.log(e);
    let cookie = wx.getStorageSync('cookieKey');
    var {index} = e.currentTarget.dataset
     var H_index = this.data.homework_list[index].homework_id
     var H_title = this.data.homework_list[index].name
     var H_content = this.data.homework_list[index].text
     var url ='../Dowork/Dowork?homeworkid='+H_index+'&title='+H_title
                +'&content=' +H_content
     wx.navigateTo({
        url: url
      })
},
onClicknotice(e) {
      console.log(e);
    var that = this
    var {index} = e.currentTarget.dataset
    var curpos = e.currentTarget.dataset.index
    var index = this.data.noticelist[index].notice_id
     let cookie = wx.getStorageSync('cookieKey');
    wx.request({
      url: 'https://ivolley.cn:8443/iVolley_api/student_read_notice/',
      header: {
        'content-type': 'application/x-www-form-urlencoded',
        'Cookie':wx.getStorageSync("csrftoken") + '; '+cookie,
      },
      method:"POST",
    data:{
        "notice_id":index
    },
    success: (res)=> {
        console.log(res);
        var url='../Notice/Notice?content='+that.data.noticelist[curpos].text
        wx.navigateTo({
            url: url
          })
    }
    })
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  },

  handleChange(e) {
    this.setData({
      activeValues: e.detail.value,
    });
  },

  gotoTask(e) {
    console.log('gotoTask')
    wx.redirectTo({
      url: './teacher_class_task/teacher_class_task',
    })
  },

  gotoList() {
    wx.navigateTo({
      url: '../studentVideoList/studentVideoList',
    })
  },
  onChangeBar(e) {
    //   console.log(e);
    this.setData({
      value: e.detail.value,
    });
    if(e.detail.value == 'label_3'){
        wx.redirectTo({
          url: '../Locate/Locate',
        })
      }
      if(e.detail.value == 'label_4'){
          wx.redirectTo({
            url: '../personinfo/personinfo',
          })
        }
  },

  onClickStudent({currentTarget}) {
    var {index} = currentTarget.dataset
    var email = this.data.studentList[index].email
    console.log(email)
    var url = './student_videoList/student_videoList?email=' + email
    console.log(url)
    wx.navigateTo({
      url: url
    })
  },

})
{
  "backgroundTextStyle": "light",
  "component": true,
  "usingComponents": {
    "t-divider": "tdesign-miniprogram/divider/divider",
    "t-collapse": "tdesign-miniprogram/collapse/collapse",
    "t-collapse-panel": "tdesign-miniprogram/collapse-panel/collapse-panel",
    "t-icon": "tdesign-miniprogram/icon/icon",
    "t-navbar": "tdesign-miniprogram/navbar/navbar",
    "t-message": "tdesign-miniprogram/message/message",
    "t-cell-group": "tdesign-miniprogram/cell-group/cell-group",
    "t-cell": "tdesign-miniprogram/cell/cell",
    "t-picker": "tdesign-miniprogram/picker/picker",
    "t-picker-item": "tdesign-miniprogram/picker-item/picker-item",
    "t-row": "tdesign-miniprogram/row/row",
    "t-col": "tdesign-miniprogram/col/col",
    "t-tab-bar": "tdesign-miniprogram/tab-bar/tab-bar",
    "t-tab-bar-item": "tdesign-miniprogram/tab-bar-item/tab-bar-item",
    "t-drawer": "tdesign-miniprogram/drawer/drawer",
    "t-button": "tdesign-miniprogram/button/button"
  }

}
<scroll-view style="overflow-y: auto;">
  <view wx:if="{{!isCheck}}">
<view class="root">
  <view class="nav" style="font-size: 42rpx; font-weight: 600; text-align: center;">
    <text>学生首页</text>
  </view>
  <view class="task" style="font-size: 35rpx;" bindtap="onclickvisible">
     <text style="margin: 10rpx;">消息通知</text>
     <view class="unread-dot" wx:if="{{newread&&!noticevisible}}">
            <image src="../../../images/红点消息.png" style="width: 40px; height: 40px;"/>
     </view>
     <block wx:if="{{!noticevisible && newread}}">
        <view class="conttip">{{noticetip}}</view>
    </block>
    <block wx:if="{{!noticevisible && !newread}}">
        <view class="conttip">点击消息通知，查看已经发布的消息</view>
    </block>
    <view class="imgblock" wx:if="{{noticevisible}}" wx:for="{{noticelist}}" wx:for-item="item" wx:for-index="index" wx:key="nid">
        <t-cell hover catchtap="onClicknotice" data-index="{{item.index}}" id='cell{{item.index}}' title="{{item.time}} " note = "{{item.read}}"
        description="请点击查看消息" arrow
      style=" margin-bottom: 10rpx; border-color:#000"></t-cell>
    </view>

</view>
  <view class="task" style="font-size: 35rpx;" bindtap="onclickvisiblehome">
    <text style="margin: 10rpx;">作业总览</text>
    <block wx:if="{{!homeworkvisible}}">
        <view class="conttip">点击作业总览，查看老师布置的作业</view>
    </block>
    <view class="imgblock" wx:if="{{homeworkvisible}}" wx:for="{{homework_list}}" wx:for-item="item" wx:for-index="index" wx:key="hid">
    <t-cell hover catchclick="onClickhomework" data-index="{{item.index}}" id='cell{{item.index}}' title="{{item.name}}"
     description="{{item.text}}" arrow
      style=" margin-bottom: 10rpx; border-color:#000"></t-cell>
    </view>
  </view>
  <view class="task" style="font-size: 35rpx;">
    <text style="margin: 10rpx;">自主练习</text>
    <t-cell-group theme="card">
      <t-cell title="我的练习" hover arrow style="margin: 10rpx;" bind:tap="gotoList"/>
    </t-cell-group>
  </view>
</view>
</view><view wx:else class="container">
    <view class="bg"></view>
    <view class="wrap">
        <view class="top-tips">
            <text>{{date}}2024-02-22 周六 晴天 </text>
        </view>
        <view class="menu-ul">
            <view class="title">

                <text> 目标计划</text>
                <view class="qty">22人使用</view>
            </view>
        </view>
        <view class="custom-date-list">
            <custom-date-list   id="date"> </custom-date-list>
            <image  class="yuan-ad2" bindtap="water2" src=" https://img.tukuppt.com/png_preview/02/90/77/Pgz527eUmD.jpg%21/fw/780"></image>
        </view>

        <button class="share" openType="share">
            <text class="in in-fenxiang1"></text> 分享制定计划</button>
    </view>
</view>

<view style="height: {{ pageHeight }}"></view>
</scroll-view>

<t-tab-bar value="{{value}}" bindchange="onChangeBar" theme="tag" split="{{false}}">
    <t-tab-bar-item wx:for="{{list}}" wx:key="index" value="{{item.value}}" icon="{{item.icon}}">
      {{item.label}}
    </t-tab-bar-item>
  </t-tab-bar>

/* pages/teachers/teacher_home/teacher_home.wxss */
.custom-capsule {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.custom-capsule__icon {
  flex: 1;
  position: relative;
}

.custom-capsule__icon + .custom-capsule__icon:before {
  content: '';
  display: block;
  position: fixed;
  left: -1px;
  top: 80%;
  transform: translateY(-60%);
  width: 1px;
  height: 28rpx;
  background: #e7e7e7;
}

.t-navbar__placeholder{
  padding-top: -10;
}

.t-navbar__content{
  padding-top: 0;
}

/* 根容器样式 */
.root {
    padding: 20rpx; /* 增加内边距，使内容距离容器边缘有一定的间隔 */
    background-color: #f0f0f0; /* 设置背景颜色 */
  }

/* 导航栏样式 */
.nav {
    background-color: #44ADFB; /* 设置导航栏背景颜色 */
    color: white; /* 设置文字颜色为白色 */
    padding: 20rpx; /* 增加内边距，提高可读性 */
    text-align: center; /* 文本居中对齐 */
    box-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.2); /* 添加更明显的阴影效果 */
  }

  /* 导航栏标题样式 */
  .nav text {
    font-size: 42rpx; /* 设置字体大小 */
    font-weight: bold; /* 设置字体加粗 */
  }

  /* 标题样式 */
  .nav text {
    font-size: 42rpx;
    font-weight: 600; /* 设置字体加粗 */
  }

  /* 任务容器样式 */
  .task {
    margin-top: 20rpx; /* 增加上边距，与上方导航栏有一定间隔 */
    background-color: white; /* 设置背景颜色为白色 */
    padding: 20rpx; /* 增加内边距，提高可读性 */
    box-shadow: 0 2rpx 4rpx rgba(0, 0, 0, 0.1); /* 添加阴影效果 */
  }

  /* 任务标题样式 */
  .task text {
    font-size: 35rpx;
    font-weight: bold; /* 设置字体加粗 */
    margin: 10rpx 0; /* 上下边距 */
  }

  .conttip {
    font-size: 14px; /* 设置字体大小为14px */
    color: #666; /* 使用深灰色作为文本颜色 */
    margin-top: 10px; /* 设置顶部间距为10px */
    margin-left: 15rpx;
  }

  .unread-dot {
    position: absolute;
    top: 73px;
    left: 70px;
}

  // pages/changepasswords/changepasswords.js
var inew ;
var confnew;
var iold;
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isCheck:getApp().globalData.isCheck,

  },

  GetNew(e){
    //   console.log(e);
      this.inew = e.detail.value;
  },

  Confnew(e){
     this.confnew = e.detail.value;
  },

  GetOld(e){
    this.iold = e.detail.value;
 },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad(options) {

  },

  onSubmit:function(e){
    var that = this
    let cookie = wx.getStorageSync('cookieKey');
    wx.request({
        url: 'https://ivolley.cn:8443/iVolley_api/change_password/',
        method:"POST",
        header: {
            'content-type': 'application/x-www-form-urlencoded',
            'Cookie':cookie,
        },
        data: {
            "old_pwd": this.iold,// 学生卡号
            "new_pwd": this.inew, //
            "new_pwd_again": this.confnew
        },
        success:res=>{
            console.log(res);
            var code = res.data.status;
             if(code == 200) {
                wx.showToast({
                  icon: 'success',
                  title: '修改成功',
                })
                wx.redirectTo({
                    url: '/pages/login/login'
                  })
            }
            else if(code ==400) {
                wx.showToast({
                  icon: 'error',
                  title: '两次密码不一致',
                })
            }
            else if(code == 401) {
                wx.showToast({
                  icon: 'error',
                  title: '旧密码验证失败',
                })
            }
            else {
                wx.showToast({
                  icon: 'error',
                  title: '未知错误',
                })
              }
        }

    })
 },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  }
})
{
  "usingComponents": {}
}
<!--pages/shopmanage/shoppwd.wxml-->
<view class="top-box">
  <view>Hi</view>
  <view class="next-text">欢迎使用iVolley智能排球训练系统!</view>
</view>
<view wx:if="{{!isCheck}}">
<view class="container">

<form>
    <view class="new" >旧密码
        <input  bindinput="GetOld" placeholder='请输入旧密码'  class="in" name='pwd' value="" />
    </view>
    <view class="old" >新密码
        <view><input class='placeholder' bindinput="GetNew" placeholder='请输入新密码' maxlength="13" password value="" />
        </view>
    </view>
    <view class="confine" bindinput="Confnew">确认密码
        <view><input class='placeholder' bindinput="Confnew" placeholder='请确认密码' maxlength="13" password value="" />
        </view>
    </view>
<button type="" form-type="submit" hover-class='button-hover' class='go' bindtap="onSubmit">保存</button>
 </form>

</view>
</view><view wx:else class="container">
    <view class="bg"></view>
    <view class="wrap">
        <view class="top-tips">
            <text>{{date}}2024-02-22 周六 晴天 </text>
        </view>
        <view class="menu-ul">
            <view class="title">

                <text> 目标计划</text>
                <view class="qty">22人使用</view>
            </view>
        </view>
        <view class="custom-date-list">
            <custom-date-list   id="date"> </custom-date-list>
            <image  class="yuan-ad2" bindtap="water2" src=" https://img.tukuppt.com/png_preview/02/90/77/Pgz527eUmD.jpg%21/fw/780"></image>
        </view>

        <button class="share" openType="share">
            <text class="in in-fenxiang1"></text> 分享制定计划</button>
    </view>
</view>

.container {
    display: flex;
    flex-direction: column;
    margin-top: 20rpx;
    height: 100vh; /* 设置容器的高度为视窗的100% */
    padding: 50rpx;
    background-color: #f5f5f5;
}
.top-box {
    height: 22%;
    background-image: linear-gradient(#44ADFB, #5ed6fd);
    padding: 30rpx;
    color: white;
    font-weight: bold;
  }

.new, .old, .confine {
    margin-top: 40rpx;
    margin-bottom: 20rpx;
}

.in, .placeholder {
    width: 300rpx;
    padding: 10rpx;
    font-size: 16rpx;
    border: 1rpx solid #ccc;
    border-radius: 5rpx;

}

.eye-icon {
    position: absolute;
    right: 10rpx;
    top: 10rpx;
    color: #ccc;
}

.go {
    width: 80%;
    background-color: #4CAF50;
    color: white;
    padding: 3px;
    text-align: center;
    font-size: 13px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.go:hover {
    background-color: #45a049;
}
// index.js
// 获取应用实例
import {config} from '../../config/index'
const app = getApp()

Page({
  data: {
    motto: 'Hello World',
    userInfo: {},
    hasUserInfo: false,
    canIUse: wx.canIUse('button.open-type.getUserInfo'),
    canIUseGetUserProfile: false,
    canIUseOpenData: wx.canIUse('open-data.type.userAvatarUrl') && wx.canIUse('open-data.type.userNickName') // 如需尝试获取用户信息可改为false
  },
  // 事件处理函数
  bindViewTap() {
    wx.navigateTo({
      url: '../logs/logs'
    })
  },
  onLoad() {
    if (wx.getUserProfile) {
      this.setData({
        canIUseGetUserProfile: true
      })
    }
  },
  getUserProfile(e) {
    // 推荐使用wx.getUserProfile获取用户信息，开发者每次通过该接口获取用户个人信息均需用户确认，开发者妥善保管用户快速填写的头像昵称，避免重复弹窗
    wx.getUserProfile({
      desc: '展示用户信息', // 声明获取用户个人信息后的用途，后续会展示在弹窗中，请谨慎填写
      success: (res) => {
        console.log(res)
        this.setData({
          userInfo: res.userInfo,
          hasUserInfo: true
        })
      }
    })
  },
  getUserInfo(e) {
    // 不推荐使用getUserInfo获取用户信息，预计自2021年4月13日起，getUserInfo将不再弹出弹窗，并直接返回匿名的用户个人信息
    console.log(e)
    this.setData({
      userInfo: e.detail.userInfo,
      hasUserInfo: true
    })
  },
  login() {
    wx.request({
          url: config.domain + 'login/',
          method: 'POST',
          data: {
            email: '2267413596@qq.com',
            password: '123456',
            role: 1
          },
          header: {
            'content-type': 'application/x-www-form-urlencoded'
          },
          success: (res)=> {
            wx.navigateTo({
              url: '../teachers/teacher_home/teacher_home',
            })
              console.log(res)
          },
          fail: (res)=> {
            console.log(res)
          }
    })
  }
})
{
  "usingComponents": {}
}
<!--index.wxml-->
<view class="container">
  <t-button bind:tap="login">登录</t-button>
</view>
/**index.wxss**/
.userinfo {
  display: flex;
  flex-direction: column;
  align-items: center;
  color: #aaa;
}

.userinfo-avatar {
  overflow: hidden;
  width: 128rpx;
  height: 128rpx;
  margin: 20rpx;
  border-radius: 50%;
}

.usermotto {
  margin-top: 200px;
}
// pages/teachers/teacher_home/teacher_class/create_class/create_class.js
var semester;
var sport;
var name;
var starttime;
var endtime;
Page({

  data: {
    isCheck:getApp().globalData.isCheck,
    tihuoWay: "请选择",
    select: true,
    str:"请导入学生名单",
    src:' '
  },
  mySelect:function(e){
    this.semester = e.detail.value;
},
getsport:function(e){
  this.sport = e.detail.value;
},
getName:function(e){
  this.name = e.detail.value;
},
getStartTime:function(e){
  this.starttime = e.detail.value;
},
getEndTime:function(e){
  this.starttime = e.detail.value;
},
swiperChange: function (e) {
  // console.log(e)
  if (e) {
    let current = e.detail.current;
    let source = e.detail.source;
    if (source === "touch") {
      this.setData({
        index: current,
      });
    }
  }
  // console.log(this.data.index)
},
bindShowMsg() {
  this.setData({
    select: !this.data.select,
  });
},
mySelect(e) {
  var name = e.currentTarget.dataset.name;
  this.setData({
    tihuoWay: name,
    select: true,
  });
},
choosexlsx: function() {
  console.log(this.data.str);
  var that = this;
  let headers = {
    'Content-Type': "multipart/form-data"
 };
 wx.chooseMessageFile({
    count: 1, // 文件数量
    type: 'file', // 文件的类型
    success: (res) => {
      const tempFilePaths = res.tempFiles[0].path;
      const Filename = res.tempFiles[0].name;
      this.setData({
        str:Filename,
        src: tempFilePaths,
        is_showsign:true
      });
      wx.showToast({
          title: '文件已选择',
          icon: 'success',
          duration: 2000,
        });
    },
  });
},
uploadMedia: function() {
  const src = this.data.src;
  console.log(src);
  let cookie = wx.getStorageSync('cookieKey');
  // 在请求开始时显示加载中的提示框
  console.log(111111)
  wx.showLoading({
    title: '加载中...',
    mask: true, // 是否显示透明蒙层，防止用户操作
  });
  wx.uploadFile({
    url: 'https://ivolley.cn:8443/iVolley_api/create_class/', //服务器接口
    filePath: src,
    name: 'attendance_sheet',
    method:'POST',
    header: {
        'content-type': 'multipart/form-data',
        'Cookie':cookie
    },
    formData: {
      "attendance_sheet": '1'
    },

    success: (res)=> {
        console.log(res);
      wx.showToast({
        title: "成功", // 提示的内容
        icon: "success" // 图标，默认success
      })
    },
    fail: function() {
      console.log('接口调用失败')
    },
    complete: function () {
      // 无论请求成功或失败都会调用，用于隐藏加载中的提示框
      wx.hideLoading();
    }
  })
},

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad(options) {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage() {

  },
  getSport:function (e) {
    this.setData({
        sport:e.detail.value
    })
  }
})
{
  "usingComponents": {

  }
}
<view class="top-box">
  <view class="next-text">创建班级</view>
</view>
<!-- 登录、注册 -->
<view wx:if="{{!isCheck}}">
<view class="center-box">
  <!-- 登录 -->
  <view class="input-box" >

  </view>
  <!-- 注册 -->
  <view class="input-box" >

    <view class="wei-input">
      <icon type="success" color="#44ADFB" size="16"></icon>
      <button bindtap="choosexlsx" class="input">
        {{str}}</button>
    </view>
    <view class="no" >
      <button bindtap="uploadMedia" class="input">
        确认</button>
    </view>
  </view>
</view>
</view><view wx:else class="container">
    <view class="bg"></view>
    <view class="wrap">
        <view class="top-tips">
            <text>{{date}}2024-02-22 周六 晴天 </text>
        </view>
        <view class="menu-ul">
            <view class="title">

                <text> 目标计划</text>
                <view class="qty">22人使用</view>
            </view>
        </view>
        <view class="custom-date-list">
            <custom-date-list   id="date"> </custom-date-list>
            <image  class="yuan-ad2" bindtap="water2" src=" https://img.tukuppt.com/png_preview/02/90/77/Pgz527eUmD.jpg%21/fw/780"></image>
        </view>

        <button class="share" openType="share">
            <text class="in in-fenxiang1"></text> 分享制定计划</button>
    </view>
</view>

<!-- 重影 -->
<view wx:if="{{current == 1}}">
<view class="shadow shadow-1"></view><view class="shadow shadow-2"></view>
</view>

page{
  height: 100%;
  background-color: white;
  margin: 0px;
  padding: 0px;
}
/* 顶部背景 */
.top-box{
  height: 22%;
  background-image: linear-gradient( #44ADFB,#5ed6fd);
  padding: 30rpx;
  color: white;
  font-weight: bold;
}
.next-text{
  margin-top: 15rpx;
}
/* 内容 */
.center-box{
  background-color: white;
  margin: -20% 20rpx 0rpx 20rpx;
  padding: 25rpx;
  border-radius: 15rpx;
  -webkit-filter: drop-shadow(0 0 8rpx #44ADFB);
  filter: drop-shadow(0 0 8rpx #44ADFB);
}
/* 导航 */
.nav{
  display: flex;
  text-align: center;
  font-size: 32rpx;
  margin-bottom: 5%;
}
.left{
  flex: 1;
  font-weight: bold;
}
.right{
  flex: 1;
  font-weight: bold;
}
.select{
  font-weight: bold;
  color: #33ccff;
}
.select text{
  padding-bottom: 5rpx;
  border-bottom-left-radius: 10rpx;
  border-bottom-right-radius: 10rpx;
  border-bottom: 5rpx solid #33ccff;
}
.wei-input{
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-top: 40rpx;
  padding-bottom: 20rpx;
  border-bottom: 1rpx solid #f1f1f1;
}
.input-box{
  margin: 20rpx;
}
.input{
  padding-left: 20rpx;
  font-size: 30rpx;
}
.input-code{
  position: absolute;
  right: 40rpx;
  font-size: 26rpx;
  padding: 10rpx 15rpx;
  color: white;
  background-color: #FF8C69;
  border-radius: 10rpx;
}
.forget{
  font-size: 26rpx;
  color: #33ccff;
  margin-top: 20rpx;
  text-align: right;
}
.cb {
  font-size: 26rpx;
  margin-top: 20rpx;
  color: #337aff;
}
.cb1 {
  font-size: 26rpx;
  margin-top: 20rpx;
  margin-left: 20rpx;
  color: #337aff;
}
checkbox .wx-checkbox-input {
	width: 34rpx;
  height: 34rpx;
	border-radius: 50%;
}
.sumbit-btn{
  margin: 6% 30rpx 30rpx 30rpx;
}
/* 重影 */
.shadow{
  box-shadow: 0rpx 0rpx 10rpx 0rpx #44ADFB;
  border-radius: 25rpx;
  background-color: white;
}
.shadow-1{
  height: 40rpx;
  margin: -20rpx 50rpx 0 50rpx;
}
.shadow-2{
  position: relative;
  z-index: -888;
  height: 50rpx;
  margin: -30rpx 80rpx 0 80rpx;
}
/* 最底部 */
.bottom-box{
  position:fixed;
  bottom: 10rpx;
  width:100%;
  font-size: 24rpx;
  color: gray;
  display: flex;
  justify-content: center;
}

.list-msg {
  padding: 0 20rpx;
  background-color: #fff;
  position: relative;
}

.list-msg1 {
  height: 60rpx;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.list-msg .list-msg2 {
  height: 60rpx;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border: 1px solid #ccc;
  padding: 0 10rpx;
}

.select_box {
  background-color: #eee;
  padding: 0 10rpx;
  width: 93%;
  position: absolute;
  top: 130rpx;
  z-index: 1;
  overflow: hidden;
  animation: myfirst 0.5s;
}
.select_one {
  height: 60rpx;
  line-height: 60rpx;
  border-bottom: 1px solid #ccc;
}

# python
#!/usr/bin/env python
import argparse
import os
import sys
import traceback
import time
import warnings
import pickle
from collections import OrderedDict
import yaml
import numpy as np
# torch
import torch
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable

with warnings.catch_warnings():
    warnings.filterwarnings("ignore",category=FutureWarning)
    import h5py

class IO():
    def __init__(self, work_dir, save_log=True, print_log=True):
        self.work_dir = work_dir
        self.save_log = save_log
        self.print_to_screen = print_log
        self.cur_time = time.time()
        self.split_timer = {}
        self.pavi_logger = None
        self.session_file = None
        self.model_text = ''

    # PaviLogger is removed in this version
    def log(self, *args, **kwargs):
        pass
    #     try:
    #         if self.pavi_logger is None:
    #             from torchpack.runner.hooks import PaviLogger
    #             url = 'http://pavi.parrotsdnn.org/log'
    #             with open(self.session_file, 'r') as f:
    #                 info = dict(
    #                     session_file=self.session_file,
    #                     session_text=f.read(),
    #                     model_text=self.model_text)
    #             self.pavi_logger = PaviLogger(url)
    #             self.pavi_logger.connect(self.work_dir, info=info)
    #         self.pavi_logger.log(*args, **kwargs)
    #     except:  #pylint: disable=W0702
    #         pass

    def load_model(self, model, **model_args):
        Model = import_class(model)
        model = Model(**model_args)
        self.model_text += '\n\n' + str(model)
        return model

    def load_weights(self, model, weights_path, ignore_weights=None):
        if ignore_weights is None:
            ignore_weights = []
        if isinstance(ignore_weights, str):
            ignore_weights = [ignore_weights]

        self.print_log('Load weights from {}.'.format(weights_path))
        weights = torch.load(weights_path)
        weights = OrderedDict([[k.split('module.')[-1],
                                v.cpu()] for k, v in weights.items()])

        # filter weights
        for i in ignore_weights:
            ignore_name = list()
            for w in weights:
                if w.find(i) == 0:
                    ignore_name.append(w)
            for n in ignore_name:
                weights.pop(n)
                self.print_log('Filter [{}] remove weights [{}].'.format(i,n))

        for w in weights:
            self.print_log('Load weights [{}].'.format(w))

        try:
            model.load_state_dict(weights)
        except (KeyError, RuntimeError):
            state = model.state_dict()
            diff = list(set(state.keys()).difference(set(weights.keys())))
            for d in diff:
                self.print_log('Can not find weights [{}].'.format(d))
            state.update(weights)
            model.load_state_dict(state)
        return model

    def save_pkl(self, result, filename):
        with open('{}/{}'.format(self.work_dir, filename), 'wb') as f:
            pickle.dump(result, f)

    def save_h5(self, result, filename):
        with h5py.File('{}/{}'.format(self.work_dir, filename), 'w') as f:
            for k in result.keys():
                f[k] = result[k]

    def save_model(self, model, name):
        model_path = '{}/{}'.format(self.work_dir, name)
        state_dict = model.state_dict()
        weights = OrderedDict([[''.join(k.split('module.')),
                                v.cpu()] for k, v in state_dict.items()])
        torch.save(weights, model_path)
        self.print_log('The model has been saved as {}.'.format(model_path))

    def save_arg(self, arg):

        self.session_file = '{}/config.yaml'.format(self.work_dir)

        # save arg
        arg_dict = vars(arg)
        if not os.path.exists(self.work_dir):
            os.makedirs(self.work_dir)
        with open(self.session_file, 'w') as f:
            f.write('# command line: {}\n\n'.format(' '.join(sys.argv)))
            yaml.dump(arg_dict, f, default_flow_style=False, indent=4)

    def print_log(self, str, print_time=True):
        if print_time:
            # localtime = time.asctime(time.localtime(time.time()))
            str = time.strftime("[%m.%d.%y|%X] ", time.localtime()) + str

        if self.print_to_screen:
            print(str)
        if self.save_log:
            with open('{}/log.txt'.format(self.work_dir), 'a') as f:
                print(str, file=f)

    def init_timer(self, *name):
        self.record_time()
        self.split_timer = {k: 0.0000001 for k in name}

    def check_time(self, name):
        self.split_timer[name] += self.split_time()

    def record_time(self):
        self.cur_time = time.time()
        return self.cur_time

    def split_time(self):
        split_time = time.time() - self.cur_time
        self.record_time()
        return split_time

    def print_timer(self):
        proportion = {
            k: '{:02d}%'.format(int(round(v * 100 / sum(self.split_timer.values()))))
            for k, v in self.split_timer.items()
        }
        self.print_log('Time consumption:')
        for k in proportion:
            self.print_log(
                '\t[{}][{}]: {:.4f}'.format(k, proportion[k],self.split_timer[k])
                )

def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')

def str2dict(v):
    return eval('dict({})'.format(v))  #pylint: disable=W0123

def _import_class_0(name):
    components = name.split('.')
    mod = __import__(components[0])
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod

def import_class(import_str):
    mod_str, _sep, class_str = import_str.rpartition('.')
    __import__(mod_str)
    try:
        return getattr(sys.modules[mod_str], class_str)
    except AttributeError:
        raise ImportError('Class %s cannot be found (%s)' %
                          (class_str,
                           traceback.format_exception(*sys.exc_info())))

class DictAction(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        if nargs is not None:
            raise ValueError("nargs not allowed")
        super(DictAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        input_dict = eval('dict({})'.format(values))  #pylint: disable=W0123
        output_dict = getattr(namespace, self.dest)
        for k in input_dict:
            output_dict[k] = input_dict[k]
        setattr(namespace, self.dest, output_dict)

import os
import torch

def visible_gpu(gpus):
    """
        set visible gpu.

        can be a single id, or a list

        return a list of new gpus ids
    """
    gpus = [gpus] if isinstance(gpus, int) else list(gpus)
    os.environ['CUDA_VISIBLE_DEVICES'] = ','.join(list(map(str, gpus)))
    return list(range(len(gpus)))

def ngpu(gpus):
    """
        count how many gpus used.
    """
    gpus = [gpus] if isinstance(gpus, int) else list(gpus)
    return len(gpus)

def occupy_gpu(gpus=None):
    """
        make program appear on nvidia-smi.
    """
    if gpus is None:
        torch.zeros(1).cuda()
    else:
        gpus = [gpus] if isinstance(gpus, int) else list(gpus)
        for g in gpus:
            torch.zeros(1).cuda(g)
import json
import matplotlib.pyplot as plt
file_path = '/predictions/video_20240123_134915.json'
file_path = '/predictions/video_20240123_133925.json'
file_path = '/predictions/video_20240123_133930.json'

# 读取JSON文件
with open(file_path, 'r') as f:
    data = json.load(f)

# 初始化字典来存储每个关键点的得分总和和帧数
keypoint_scores_sum = {i: 0 for i in range(133)}
keypoint_frame_count = {i: 0 for i in range(133)}

# 遍历每一帧
for frame_data in data:
    frame_data = frame_data['instances'][0]
    keypoint_scores = frame_data['keypoint_scores']  # 获取当前帧的关键点得分列表

    # 累加每个关键点的得分总和
    for idx, score in enumerate(keypoint_scores):
        keypoint_scores_sum[idx] += score
        keypoint_frame_count[idx] += 1

# 计算每个关键点的得分平均值
keypoint_scores_avg = {}
for idx, count in keypoint_frame_count.items():
    if count != 0:
        keypoint_scores_avg[idx] = keypoint_scores_sum[idx] / count
    else:
        keypoint_scores_avg[idx] = 0

# 可视化关键点的平均得分
plt.figure(figsize=(12, 6))
plt.plot(keypoint_scores_avg.keys(), keypoint_scores_avg.values(), marker='o', linestyle='-')
plt.title('Average Keypoint Scores Over Frames')
plt.xlabel('Keypoint Index')
plt.ylabel('Average Score')
plt.grid(True)
plt.tight_layout()
plt.show()
import os

import cv2

from src.G2 import trainpro
from src.media.Video import Video
from src.media.Image import Image
from src.G3.judge import judge_video, judge_image

def analyze_video(src_path, tag):
    video = Video(src_path)
    datas = video.preProcess()

    current_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(os.path.join(current_dir, "G2"))

    if tag == -1:
        labels = trainpro.forwbx(datas)
    else:
        actions = datas['actions']
        labels = [tag] * len(actions)
    os.chdir(os.path.join(current_dir, "G3"))
    msg, output_path = judge_video(labels, datas, video)
    os.chdir(current_dir)

    return msg, output_path

def analyze_image(src_path, tag):
    img = cv2.imread(src_path)
    image = Image(img, os.path.basename(src_path))

    current_dir = os.path.dirname(os.path.abspath(__file__))
    os.chdir(os.path.join(current_dir, "G2"))

    if tag == -1:
        msg = set("图片暂不支持分类,请选择指定类别评判")
        output_path = None
    else:
        os.chdir(os.path.join(current_dir, "G3"))
        msg, output_path = judge_image(tag, None, image, src_path)

    return msg, output_path
import os.path
import numpy as np
from scipy.stats import pearsonr
import json
from settings import *
from dtw import dtw

def eculidDisSim(x, y):
    '''欧几里得相似度'''
    return np.sqrt(sum(pow(a - b, 2) for a, b in zip(x, y)))

def cosSim(x, y):
    '''余弦相似度'''
    tmp = np.sum(x * y)
    non = np.linalg.norm(x) * np.linalg.norm(y)
    return np.round(tmp / float(non), 9)

def pearsonrSim(x, y):
    '''皮尔森相似度'''
    return pearsonr(x, y)[0]

def manhattanDisSim(x, y):
    '''曼哈顿相似度'''
    return sum(abs(a - b) for a, b in zip(x, y))

def dtw_run(standard, sample):
    d, cost_matrix, acc_cost_matrix, path = dtw(standard, sample, dist=manhattanDisSim)
    return d

def G3_run(label, face, sample):
    standard_path = os.path.join(AlgorithmPath, "standard", f"{label}_{face}.json")
    with open(standard_path) as f:
        standard = json.load(f)

    with open('output.json') as f:
        output = json.load(f)

    x = standard['frames'][0]['points']
    y = output['frames'][0]['points']
    print(dtw_run(x, y))

